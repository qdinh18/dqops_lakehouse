services:
  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z-cpuv1
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Web console
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
    networks:
      - dqops_lakehouse_network

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MYSQL_USER: ${MARIADB_USER}
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}
      MYSQL_DATABASE: ${MARIADB_DATABASE}
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "${MARIADB_USER}", "-p${MARIADB_PASSWORD}"]
      interval: 10s
    volumes:
      - mariadb-data:/var/lib/mysql
    networks:
      - dqops_lakehouse_network

  hive-metastore:
    build: ./hive
    container_name: hive-metastore
    ports:
      - 9083:9083
    environment:
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    depends_on:
      mariadb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9083"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s 
    networks:
      - dqops_lakehouse_network

  spark:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark-custom
    container_name: spark
    hostname: spark-master
    depends_on:
      minio:
        condition: service_healthy
      hive-metastore:
        condition: service_healthy
    environment:
      SPARK_MODE: master
      PYSPARK_PYTHON: python3
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "7077:7077"   # Spark master
      - "8081:8080"   # UI
    volumes:
      - ./airflow/data:/opt/airflow/data
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    networks:
      - dqops_lakehouse_network

  spark-worker:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark-custom
    container_name: spark-worker
    depends_on:
      - spark
    environment:
      SPARK_MODE: worker
      PYSPARK_PYTHON: python3
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "8082:8081" # Worker UI
      - "4041:4040" # Application UIs
    volumes:
      - ./airflow/data:/opt/airflow/data
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dqops_userhome/.data/check_results:/data/check_results
    deploy:
      resources:
        reservations:
          cpus: '1.0'
          memory: 2G
        limits:
          cpus: '2.0'
          memory: 4G
    networks:
      - dqops_lakehouse_network

  spark-worker-2:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark-custom
    container_name: spark-worker-2
    depends_on:
      - spark
    environment:
      SPARK_MODE: worker
      PYSPARK_PYTHON: python3
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "8083:8081" # Worker UI
      - "4042:4040" # Application UIs
    volumes:
      - ./airflow/data:/opt/airflow/data
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dqops_userhome/.data/check_results:/data/check_results
    deploy:
      resources:
        reservations:
          cpus: '1.0'
          memory: 2G
        limits:
          cpus: '2.0'
          memory: 4G
    networks:
      - dqops_lakehouse_network

  spark-thrift:
    build:
      context: ./spark
      dockerfile: Dockerfile.spark-custom
    container_name: spark-thrift
    command: [
      "/opt/bitnami/spark/sbin/start-thriftserver.sh",
      "--conf", "spark.cores.max=2"
    ]
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    ports:
      - "10000:10000"
    volumes:
      - ./airflow/data:/opt/airflow/data
      - ./spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./dqops_userhome/.data/check_results:/data/check_results
    depends_on:
      spark:
        condition: service_started
    networks:
      - dqops_lakehouse_network

  db:
    image: postgres:16
    container_name: superset_db
    restart: always
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - superset_db_data:/var/lib/postgresql/data
    networks:
      - dqops_lakehouse_network


  superset:
    image: apache/superset:latest
    build:
      context: ./superset
    container_name: superset
    env_file: .env
    environment:
      SQLALCHEMY_DATABASE_URI: >-
        postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@superset_db:5432/${POSTGRES_DB}
      SUPERSET_LOAD_EXAMPLES: "no"
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
    volumes:
      - superset_data:/app/superset_home
      - ./superset/superset_config.py:/app/superset_config.py
    ports:
      - "8088:8088"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - dqops_lakehouse_network

  dqops:
    image: dqops/dqops
    container_name: dqops
    ports:
      - "8888:8888"
    volumes:
      - ./dqops_userhome:/dqops/userhome
    networks:
      - dqops_lakehouse_network

networks:
  dqops_lakehouse_network:
    driver: bridge

volumes:
  minio-data:
  mariadb-data:
  superset_db_data:
  superset_data: